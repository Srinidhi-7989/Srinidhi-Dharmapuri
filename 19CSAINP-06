TEAM NAME:- 19CSAINP-06

RegistrationActivity.java
package com.example. RegistrationActivity;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class RegistrationActivity extends AppCompatActivity {

    /* Define the UI elements */
    private EditText eRegName;
    private EditText eRegPassword;
    private Button eRegister;

    /* Create an object of the class Credentials */
    public static Credentials credentials = new Credentials();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_registration);

        /* Bind the UI elements with the XML layout elements */
        eRegName = findViewById(R.id.etRegName);
        eRegPassword = findViewById(R.id.etRegPassword);
        eRegister = findViewById(R.id.btnRegister);

        /* A listener for click events on the Register Button */
        eRegister.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                /* Obtain the inputs from the fields */
                String registeredName = eRegName.getText().toString();
                String registeredPassword = eRegPassword.getText().toString();

                /* Check if the fields are valid */
                if(validate(registeredName, registeredPassword))
                {
                    /* Add the credentials into our database */
                    credentials.addCredentials(registeredName, registeredPassword);
                    Toast.makeText(RegistrationActivity.this, "Registration Successful!", Toast.LENGTH_SHORT).show();

                    /* Go to Login Activity */
                    startActivity(new Intent(RegistrationActivity.this, MainActivity.class));
                }
            }
        });
    }

    /* Function for validating the input credentials from the user */
    boolean validate(String name, String password)
    {
        /* Check if the name is empty and password field is 8 characters long */
        if(name.isEmpty() || (password.length() < 8))
        {
            Toast.makeText(this, "Please enter your name and ensure password is more than 8 characters long!", Toast.LENGTH_SHORT).show();
            return false;
        }

        return true;
    }
}

FILE.PY
from justHealthServer import app
from database import *
from flask import request
import api
import json
import requests
@app.route('/api/saveAndroidRegistrationID', methods=['POST'])
#need to add decorator here
def saveAndroidRegistrationID():
    username = request.form['username']
    registrationID = request.form['registrationid']

    try: 
        checkExisting = Androidregistration.select().where(Androidregistration.username == username).get()
    except Androidregistration.DoesNotExist:
        checkExisting = None

    if checkExisting != None:
        update = Androidregistration.update(
            registrationid = registrationID
            ).where(Androidregistration.username == username)

        with database.transaction():
            update.execute()
            return "True"
        return "Failed"
    else:
        insert = Androidregistration.insert(
            username = username,
            registrationid = registrationID
            )

        with database.transaction():
            insert.execute()
            return "True"
        return "Failed"

def createPushNotification(notificationid):
  """Creates a push notification, that can be sent to the users android device"""
  notification = Notification.select().dicts().where(Notification.notificationid == notificationid).get()
  username = notification['username']
  title = notification['notificationtype']
  content = getAndroidNotificationContent(notification)
  if content == "DoesNotExist":
    return None
  else:
    sendPushNotification(username, title, content)

def sendPushNotification(username, title, message):
  """Sends a push notification to the users Android device with the specified title and message"""
  # Get Registration ID
  try:
    registrationid = Androidregistration.select().where(Androidregistration.username == username).get().registrationid
  except Androidregistration.DoesNotExist:
    return "False"

  # Build Message
  headers = {
  'content-type' : 'application/json',
  'Authorization' : "key=" + app.config['GCM_API_KEY']
  }
  payload = {
    "data" : {
      "title" : title,
      "message" : message
    },
    "registration_ids": [registrationid]
  }
  
  # Post to google
  r = requests.post('https://android.googleapis.com/gcm/send', data=json.dumps(payload), headers=headers)

  # Check result
  try:
    result = json.loads(r.text)
  except Exception:
    return "False"
  if (result['success'] == 1) and (result['failure'] == 0):
    return "True"
  return "False"

@app.route('/api/deleteAndroidRegistrationID', methods=['POST'])
#Need to add decorator here
def deleteAndroidRegID():
  username = request.form['username']
  regId = request.form['registrationid']
  registration = Androidregistration.select().where((Androidregistration.username == username) and (Androidregistration.registrationid == regId)).get()

  with database.transaction():
    registration.delete_instance()
    return "True"
  return "False"

def getAndroidNotificationContent(notification):
    """gets the body/content of the notification"""
    if notification['notificationtype'] == "Connection Request":
        try: 
            requestor = Relationship.select().where(Relationship.connectionid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = "You have a new connection request from " + requestor.requestor.username
    
    if notification['notificationtype'] == "New Connection":
        content = "You have a new connection, click above to view."
    
    if notification['notificationtype'] == "Prescription Added":
        try:
            prescription = Prescription.select().where(Prescription.prescriptionid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = "A new prescription for " + prescription.medication.name + " has been added to your profile."

    if notification['notificationtype'] == "Prescription Updated":
        try:
            prescription = Prescription.select().where(Prescription.prescriptionid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = "Your prescription for " + prescription.medication.name + " has been updated."
    
    if notification['notificationtype'] == "Appointment Invite":
        try:
            appointment = Appointments.select().where(Appointments.appid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = appointment.creator.username + " has added an appointment with you on " + str(appointment.startdate) + "."

    if notification['notificationtype'] == "Appointment Updated":
        try:
            appointment = Appointments.select().where(Appointments.appid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = appointment.creator.username + " has updated the following appointment with you: " + str(appointment.name) + "."

    if notification['notificationtype'] == "Appointment Cancelled":
        content = "One of your appointments has been cancelled, click above to view your updated calendar."

    if notification['notificationtype'] == "Password Reset":
        content = "Your password has been changed successfully."

    if notification['notificationtype'] == "Medication Low":
        try:
            prescription = Prescription.select().where(Prescription.prescriptionid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = prescription.username.username + "'s prescription for " + prescription.medication.name + " is running low."

    if notification['notificationtype'] == "Appointment Accepted":
        try:
            appointment = Appointments.select().where(Appointments.appid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = appointment.invitee.username + " has accepted the appointment with you on " + str(appointment.startdate) + "."

    if notification['notificationtype'] == "Appointment Declined":
        try:
            appointment = Appointments.select().where(Appointments.appid == notification['relatedObject']).get()
        except:
            doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
            with database.transaction():
                doesNotExist.delete_instance()
                return "DoesNotExist"
        content = appointment.invitee.username + " has declined the appointment with you on " + str(appointment.startdate) + "."

    if notification['notificationtype'] == "Medication Low":
      try:
        prescription = Prescription.select().where(Prescription.prescriptionid == notification['relatedObject']).get()
      except:
        doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
        with database.transaction():
          doesNotExist.delete_instance()
          return "DoesNotExist"
      content = "You have less than 3 days stock of " + prescription.medication.name + " left."

    if notification['notificationtype'] == "Patient Medication Low":
      try:
        prescription = Prescription.select().where(Prescription.prescriptionid == notification['relatedObject']).get()
      except:
        doesNotExist = Notification.get(Notification.notificationid == notification['notificationid'])
        with database.transaction():
          doesNotExist.delete_instance()
          return "DoesNotExist"
      content = prescription.username.username + " has less than 3 days stock of " + prescription.medication.name + " left."

    if notification['notificationtype'] == "Missed Prescription":
      try:
        takeInstance = TakePrescription.select().where(TakePrescription.takeid == notification['relatedObject']).get()
        prescription = Prescription.select().where(Prescription.prescriptionid == takeInstance.prescriptionid).get()
        content = "You only took " + str(takeInstance.currentcount) + " out of " + str(prescription.frequency) + " on " + str(takeInstance.currentdate)
      except:
        doesNotExist = Notification.get(Notification.notificationid == prescriptionid)
        with database.transaction():
          doesNotExist.delete_instance()
          return "DoesNotExist"

    if notification['notificationtype'] == "Carer Missed Prescription":
      try:
        takeInstance = TakePrescription.select().where(TakePrescription.takeid == notification['relatedObject']).get()
        prescription = Prescription.select().where(Prescription.prescriptionid == takeInstance.prescriptionid).get()
        content = "Your patient " + str(prescription.username.username) + " only took " + str(takeInstance.currentcount) + " out of " + str(prescription.frequency) + " on " + str(takeInstance.currentdate)
      except:
        doesNotExist = Notification.get(Notification.notificationid == prescriptionid)
        with database.transaction():
          doesNotExist.delete_instance()
          return "DoesNotExist"
    
    return content



#######
##This is a test just for project fair
#######
@app.route('/gcm/push', methods=['POST', 'GET'])
def testPushNotification():
  for user in Androidregistration.select():
    sendPushNotification(user.username, "Test Push", "This is a test push notification that has been sent manually by the JustHealth team. This is for demonstration only")
  return "You should have recieved a push notification!"
package hospitallsystem;


public class HomePage extends javax.swing.JFrame {

  
    public HomePage() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setText("MAKE AN APPOINTMENT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("DOCTOR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("                          HOSPITAL SYSTEM");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DocLogin doc = new DocLogin();
        doc.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        patient page = new patient();
        page.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

   
    public static void main(String args[]) {
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
ANDROID CODE
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <EditText
        android:id="@+id/etname"
        android:layout_width="278dp"
        android:layout_height="54dp"
        android:ems="10"
        android:inputType="textPersonName"
        android:text="Name"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.496"
        app:layout_constraintStart_toStartOf="parent"
        tools:layout_editor_absoluteY="155dp" />

    <EditText
        android:id="@+id/et password"
        android:layout_width="265dp"
        android:layout_height="50dp"
        android:ems="10"
        android:hint="password"
        android:inputType="numberPassword"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        tools:layout_editor_absoluteY="268dp" />

    <Button
        android:id="@+id/button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="160dp"
        android:layout_marginRight="160dp"
        android:layout_marginBottom="316dp"
        android:text="login"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <TextView
        android:id="@+id/tv info"
        android:layout_width="210dp"
        android:layout_height="21dp"
        android:text="no of incorrect attemts: "
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        tools:layout_editor_absoluteY="456dp" />

</androidx.constraintlayout.widget.ConstraintLayout>
